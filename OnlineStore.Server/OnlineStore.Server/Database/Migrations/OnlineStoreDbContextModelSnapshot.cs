// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Server.Database.Context;

#nullable disable

namespace OnlineStore.Server.Database.Migrations
{
    [DbContext(typeof(OnlineStoreDbContext))]
    partial class OnlineStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("code");

                    b.Property<int>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("id_customer_pk");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("id_items_pk");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("order_status");

                    b.Property<DateOnly?>("ShipmentDate")
                        .HasColumnType("date")
                        .HasColumnName("shipment_date");

                    b.HasKey("Id")
                        .HasName("id_order_pk");

                    b.HasIndex("CustomerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.OrderElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<double>("ItemPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("item_price");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("integer")
                        .HasColumnName("items_count");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("id_order_element_pk");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_elements", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("id_user_pk");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users_table", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Server.Database.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("1tomany_customer_to_orders_fk");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.OrderElement", b =>
                {
                    b.HasOne("OnlineStore.Server.Database.Entities.Item", "Item")
                        .WithMany("OrderElements")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("manyto1_order_elements_to_item_fk");

                    b.HasOne("OnlineStore.Server.Database.Entities.Order", "Order")
                        .WithMany("OrderElements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("1tomany_order_to_order_elements_fk");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.User", b =>
                {
                    b.HasOne("OnlineStore.Server.Database.Entities.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("OnlineStore.Server.Database.Entities.User", "CustomerId")
                        .HasConstraintName("1to1_customer_to_user_fk");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Item", b =>
                {
                    b.Navigation("OrderElements");
                });

            modelBuilder.Entity("OnlineStore.Server.Database.Entities.Order", b =>
                {
                    b.Navigation("OrderElements");
                });
#pragma warning restore 612, 618
        }
    }
}
